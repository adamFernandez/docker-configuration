#!/bin/bash
# echo "Current working directory: $(pwd)"
now=$(date +'%Y.%m.%d_%H:%M:%S');
# VERSION=$(ssh -T forge@206.189.117.88 "mysql --defaults-extra-file=./.my.cnf "$B_DB" -N -B -e 'SELECT version FROM info WHERE id=1'")

jq(){
  args="${1:-}"
  query="$2"
  file="$3"
  docker-compose run --rm jq sh -c "jq $args '$query'" < "$file"
}

get_info() {
  #Get new site details
  domain=$(read -p "Site domain: " sdomain; echo $sdomain)
  repo=$(read -p "Site repo: " srepo; echo $srepo)
  branch=$(read -p "Site branch: " sbranch; echo $sbranch)
  echo "$domain $repo $branch"
}

create_list() {
  [ "$2" ] && msg="$2" || msg="Make a selection:"
  PS3=$'\n'"$msg "
  select name in $1
  do 
      break
  done

  echo "$name"
}

create_free_list() {
    local list=("$@")
    local message="Select environment:"
    PS3=$'\n'"$message "
    
    select option in "${list[@]}"
    do
        if [[ ! -z "$option" ]]; then
            echo "$option"
            break
        else
            echo "Invalid selection. Please try again."
        fi
    done
}

create_select_list () {
  list=$1
  source=$2
  message=$3
  # Output a list with every server name: 
  [ "$message" ] && msg="$message" || msg="Select from $source:"
  PS3="$msg "
  select name in $list
  do 
      break
  done
  # Filter the results based in an element name and retrieve its id
  src_id=$(jq "" ".$source[] | select(.name == \"$name\").id" "./data/$source/forge${source}response.json" )
  if [ $source == "sites" ]; then
    server_id=$(jq "" ".$source[] | select(.name == \"$name\").server_id" "./data/$source/forge${source}response.json" ) 
  else 
    server_id=$(jq "" ".$source[] | select(.name == \"$name\").id" "./data/$source/forge${source}response.json" ) 
  fi
  server_ip=$(jq "-r" ".servers[] | select(.id == $server_id).ip_address" "data/servers/forgeserversresponse.json" ) 

  echo "$src_id $server_ip $name"
}

create_site() {
  serverid=$1
  domain=$2
  auth=$3

  mkdir -p "./sites/$domain"

  printf "API Request: https://forge.laravel.com/api/v1/servers/${serverid}/sites"

  curl -S -i -k -X POST -H "Authorization: $auth" -H "Content-type: application/json" -H "Accept: application/json" \
  "https://forge.laravel.com/api/v1/servers/${serverid}/sites" -d "{\"domain\":\"${domain}\", \"project_type\":\"php\", \"directory\":\"/public\"}" > "./sites/${domain}/forgecreatesite-${domain}.log" 2>&1

  
  # curl -S -i -k -X POST -H "Authorization: $auth" -H "Content-type: application/json" -H "Accept: application/json" \
  # https://forge.laravel.com/api/v1/servers/${serverid}/sites -d "{\"domain\":\"${domain}\", \"project_type\":\"php\", \"directory\":\"/public\"}" > "./sites/${domain}/forgecreatesite-${domain}.log"

  siteid=$(cat ./sites/$domain/forgecreatesite-$domain.log | perl -n -e'/"id":(\d+)/ && print $1')
  echo "${siteid}"
}

install_repo() {
  serverid=$1
  siteid=$2
  auth=$3
  repo=$4
  branch=$5
  domain=$6
  repo_url="wiedemannlampeprojects/${repo}"
  echo -e "\nInstalling repository ${repo} into ${domain}..."
  curl -S -k -X POST -H "Authorization: ${auth}" -H "Content-type: application/json" -H "Accept: application/json" "https://forge.laravel.com/api/v1/servers/${serverid}/sites/${siteid}/git" -d "{\"repository\": \"${repo_url}\", \"provider\": \"bitbucket\", \"branch\": \"${branch}\"}" > "./sites/${domain}/forgerepoinstall-${repo}.json"

  echo -e "\nWaiting 15s (git installation)..."
  sleep 15
}

deployment_script() {
  serverid=$1
  domain=$2
  siteid=$3
  auth=$4
  file=$5

  file_content=$(<"${file}")
  payload=$(jq -n --arg content "$file_content" '{"content": $content, "auto_source": false}')
  
  #(optional) Update deployment script for Laravel projects
  curl -X PUT -H "Authorization: ${auth}" -H "Content-type: application/json" "https://forge.laravel.com/api/v1/servers/${serverid}/sites/${siteid}/deployment/script" -d "${payload}" 

  cp "$file" "./sites/${domain}/"
}

create_new_db() {
 
  echo -e "Creating a db:\n"

  get_list "servers"
  read -r server_id server_ip server_name <<< $(create_select_list "$names" "servers" "Choose a server:")
  
  # check_source "sites" "$server_id"

  # get_list "sites" "$server_id" "" "api"
  # read -r site_id server_ip site_name <<< $(create_select_list "$api_list" "sites" "Choose a site from ${server_name}:")

  # echo "serverid: ${server_id}"

  echo -e "Db name must only contain letters, numbers, and underscores!\n"
  db_pass=${3:-$(openssl rand -base64 15 | tr -d '+/=' | cut -c1-10)}
  db_name=$(read -p "Database name: " dbname; echo $dbname)
  db_user=$(read -p "Database user: " dbuser; echo $dbuser)

  payload="{ \"name\": \"${db_name}\", \"user\": \"${db_user}\", \"password\": \"${db_pass}\" }"
  # echo "Payload: ${payload}"
  sleep 2
  # echo "Creating db ${db_name} for user ${db_user} and autogenerated password ${db_pass}"
  curl -S -k -X POST -H "Authorization: ${AUTH}" -H "Accept: application/json" -H "Content-Type: application/json" https://forge.laravel.com/api/v1/servers/"${server_id}"/databases -d "${payload}" > "./testing/database-creation.log"
  echo "$payload"
  echo "$db_name $db_user $db_pass"
}
  # ssh -o StrictHostKeyChecking=no -A forge@${server_ip} "cd ./${site_name} \
  # && echo 'DB_DATABASE=$db_name' >> './.env' \
  # && echo 'DB_USER=$db_user' >> ./'.env' \
  # && echo 'DB_PASSWORD=$db_pass' >> './.env' "

environment_variables(){
  serverid=$1
  siteid=$2
  sitename=$3
  file=$file

  curl -X GET -H "Authorization: ${AUTH}" -H "Content-type: application/json" "https://forge.laravel.com/api/v1/servers/${serverid}/sites/${siteid}/env" > "./sites/${sitename}/.env"

  echo -e "\nNow edit the file in /sites/${sitename}/.env if needed and then press any key when finish editing"
  read -p "Continue: "

  file_content=$(<"./sites/${sitename}/.env")
  echo "File content: ${file_content}"
  payload=$(jq -n --arg content \"${file_content}\" '{"content": $content}')
  echo "payload: ${payload}"
  echo "Updating environment file in ${sitename}..."
  # curl -X PUT -H "Authorization: ${auth}" -H "Content-type: application/json" "https://forge.laravel.com/api/v1/servers/${serverid}/sites/${siteid}/env" -d "${payload}" 
  
}

make_menu_from(){
  echo "Number of arguments: $#"
  echo "All arguments: $@"

  for var in "$@"; do
    echo "Var $var"
  done
}

get_list() {
  source=$1
  server_id=$2
  file=${3:-"./data/${source}/forge${source}response.json"}
  api=$4
  
  if [ $api ]; then
    names=$(jq "-r" ".$source[] | select(.name | startswith(\"api.\") or startswith(\"craft-\")).name" "${file}" )
  else
    names=$(jq "-r" ".$source[] | select(.name | startswith(\"api.\") or startswith(\"craft-\") | not).name" "${file}" )
    # names=$(jq "-r" ".$source[].name" "${file}")
  fi
}

check_source() {
  source=$1
  server_id=$2
  is_api=${3:-""}

  base_path=./data/$source
  mkdir -p $base_path
  mkdir -p "./tmp"

  [ $source = "sites" ] && url="$server_id/$source" || url=""
  src=$([ $source = "servers" ] && echo "servers" || echo "sites")

  # Check if source response exists and it's not empty

  response_file="./data/$source/forge${source}response.json"
  
  if [ -f $response_file ]; then
    content=$(<"$response_file")
    if [ "$content" != "" ]; then
      echo "File $response_file exists."
    else 
      echo "File $response_file exists but is empty."
    fi
  else
    echo "File $response_file doesn't exists yet."
  fi

  # Get file size

  size_file="./data/$source/forge${source}size.json"

  if [ ! -f $size_file ]; then  
    curl -s -o "${response_file}" -w '%{size_download}' -k -H "Authorization: ${AUTH}" -H "Content-type: application/json" -H "Accept: application/json" "https://forge.laravel.com/api/v1/servers/${url}" > "${size_file}"
    size=$(<"${size_file}")
    echo -e "\n\n\nNo file found: $source, $url Size: $size\n\n\n"
  elif [ -f "$size_file" ]; then
    echo "File $size_file already exists"
    size=$(<"$size_file")
    echo "Size: $size"
  else
    curl -s -o "./data/$source/forge${source}response.json" -w '%{size_download}' -k -H "Authorization: ${AUTH}" -H "Content-type: application/json" -H "Accept: application/json" "https://forge.laravel.com/api/v1/servers/${url}" > "$size_file"
    size=$(<"$size_file")
    echo -e "\n\n\n$source, $url Size: $size\n\n\n"
    new_size=$(curl -s -w '%{size_download}' -o /dev/null -k -H "Authorization: ${AUTH}" -H "Content-type: application/json" -H "Accept: application/json" "https://forge.laravel.com/api/v1/servers/${url}")
    echo -e "New $source, $url Size: $new_size"
  fi

  if [ "$new_size" != "$size" ]; then
    echo "Changes found in $source"
    curl -S -k GET -H "Authorization: ${AUTH}" -H "Content-type: application/json" -H "Accept: application/json" "https://forge.laravel.com/api/v1/servers/${url}" > "$response_file" 2>/dev/null
  fi  
}


compare_json_files() {
  local file1="$1"
  local file2="$2"

  # Use jq to format the JSON files consistently
  formatted_file1=$(jq -S -c . "$file1")
  formatted_file2=$(jq -S -c . "$file2")

  # Compare the formatted JSON strings
  # if [ $(jq -n --slurpfile file1 $file1 --slurpfile file2 $file2 '$file2[0] - $file1') ]; then
  if [ "$formatted_file1" == "$formatted_file2" ]; then
    echo "Files $file1 and $file2 are identical."
  else
    echo "Files $file1 and $file2 are different."
  fi
}

replace_file() {
  target_f=$1
  source_f=$2
  cp "${source_f}" "${target_f}"
  echo -e "\t- ${source_f} moved to ${target_f}\n";
  # sleep 5
  # clear 
}

# IN DEVELOPMENT
check_file(){
  source_file=$1
  from_path=$2
  file_path=$(find "$from_path" -name "$source_file" -print -quit)
  [ $file_path ] && echo "$file_path" || false
}

db_details() {
  site_name=$1
  server_ip=$2

  # sleep 5

  data=$(ssh -o StrictHostKeyChecking=no -A forge@${server_ip} "cd ${site_name} && cat \$(find ./ -name .env -print -quit) | grep DB_")
  # echo "$DATA"
  du=$(echo $data | perl -n -e'/DB_USER=([\S]+)/ && print $1')
  dd=$(echo $data | perl -n -e'/DB_DATABASE=([\S]+)/ && print $1')
  dp=$(echo $data | perl -n -e'/DB_PASSWORD=([\S]+)/ && print $1')
  ip=$(echo $data | perl -n -e'/DB_SERVER=([\S]+)/ && print $1')

  echo "$du $dd $dp $ip"
}


# build-script() {
#   sitename=${1}
#   serverip=${2:-178.62.77.158}

#   mkdir -p "./local-build/"

#   rsync -av forge@${serverip}:~/${sitename} "./local-build/"

#   # ssh -o StrictHostKeyChecking=no -A forge@178.62.77.158
#   cd "./local-build/${sitename}"
#   yarn
#   yarn build

#   if [ $? -eq 0 ]; then
#     echo "Build successful. No errors detected."
#     rsync -av --update --archive "./.nuxt" forge@${serverip}:~/${sitename}
#     rsync -av --update --archive "./.output" forge@${serverip}:~/${sitename}
#   else
#     echo "Build failed. Errors detected."
#     exit 1  # Exit the script with an error status
#   fi
# }

welcome(){
  sitename=$(read -p "Site to locally build [alpine-local-build.build]: " ssitename; echo $ssitename)
  ssitename=${ssitename:-alpine-local-build.build}

  sitename=$ssitename

  build-script "${sitename}"
}


dump_database() {
  root_db=$1
  source_server=$2
  d=$3

  check_server "$source_server" "$root_db" "$d"
  clean_folders "$source_server" "$root_db"
}

check_server() {
  srcs=$1
  rootdb=$2
  d=$3
  version=$(ssh -T forge@$srcs "mysql --defaults-extra-file=$rootdb/.my.ext.cnf $d -N -B -e 'SELECT version FROM info WHERE id=1'")
  echo "Craft version is: $version"

  latest=$rootdb/latest

  ssh -T forge@$srcs "mkdir -p '${latest}' && \
    if [ -z \"\$(find ./$latest -maxdepth 0 -empty)\" ]; then \
      echo -e \"\nMoving $d to $latest directory in server...\"; \
      mv ./$latest/*.sql ./$rootdb/; \
      mysqldump --defaults-extra-file=$rootdb/.my.ext.cnf $d > "$latest/$d--$now--$version.sql"; \
      echo "Database $d has been saved in server $srcs"; \
    else
      echo -e \"\n$latest is empty\"; \
      mysqldump --defaults-extra-file=$rootdb/.my.ext.cnf $d > "$latest/$d--$now--$version.sql"; \
      echo 'Database $d has been saved in server'; \
    fi";

  if [ -z "$(find ./$latest -maxdepth 0 -empty)" ]; then
    echo -e "\nMoving $d to $latest local directory"
    mv ./$latest/*.sql ./$rootdb/
    rsync -avz --ignore-existing forge@$srcs:$latest/*.sql $latest
    echo "Database $d has been saved locally"
  else 
    echo -e "\n${latest} is empty"
    rsync -avz --ignore-existing forge@$srcs:$latest/*.sql $latest
    echo "Database $d has been saved locally"
  fi
}

clean_folders() {
  ssip=$1
  rootdb=$2
  max_files=10

  folder_path=$rootdb

  ssh forge@$ssip "cd ./$folder_path || exit; 
    file_count=\$(find . -maxdepth 1 -type f | wc -l); \
    echo -e \"\nFolder path is: $folder_path\"; \
    echo \"File count: \$file_count, Max files: $max_files\"; \
    [ \"\$file_count\" -gt \"$max_files\" ] && echo \"Max files riched.\" || echo \"Still space.\"; \
    if [ \"\$file_count\" -gt \"$max_files\" ]; then \
      echo \"Removing extra files on server\"; \
      ls -t | grep -v 'latest' | tail -n +\$(($max_files + 1)) | xargs -d '\n' rm --; \
    fi; 
    files=\$(ls -t | grep -v 'latest'); \
    file_count=\$(find . -maxdepth 1 -type f | wc -l); \
    echo -e \"\nFiles: \n\n\$files\"; \
    echo -e \"\n\$((file_count)) files in server $folder_path folder.\"; \
    cd latest || exit; \
    latest=\$(ls -t | head -n 1); \
    echo -e \"\tLatest: \"\$latest\"\";  
    "
  
  cd ./$folder_path || exit
  file_count=$(find . -maxdepth 1 -type f | wc -l)
  if [ "$file_count" -gt "$max_files" ]; then
    ls -t | grep -v 'latest' | tail -n +$((max_files + 1)) | xargs -d '\n' rm --
  fi
  files=$(ls -t | grep -v 'latest')
    file_count=$(find . -maxdepth 1 -type f | wc -l)
    # echo "$files"
    echo -e "\n$((file_count)) files in local $folder_path folder." 
  cd latest || exit 
  latest=$(ls -t | head -n 1)
  echo -e "\tLatest: $latest"
}

sort_server() {
  if [ "$1" == '10.131.19.138' ]; then 
    ip="206.189.117.88"
  elif [ "$1" == '127.0.0.1' ]; then
    ip="$2"
  else 
    ip=$1
  fi
  echo "$ip"
}